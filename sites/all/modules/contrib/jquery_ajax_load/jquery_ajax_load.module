<?php
/**
* @file
* Basic Module file.
*
*/

/**
 * Implements hook_init().
 */

function jquery_ajax_load_init() {
  $module_path = drupal_get_path('module', 'jquery_ajax_load');
  $trigger = jquery_ajax_load_get_triggers('jquery_ajax_load_trigger', '.jquery_ajax_load');
  $target = variable_get('jquery_ajax_load_target', '#jquery_ajax_load_target');
  $toggle = variable_get('jquery_ajax_load_toggle', TRUE);
  $animation = variable_get('jquery_ajax_load_animation', TRUE);
  $site_name = variable_get('site_name', "Default site name");
  drupal_add_js(array(
    'jquery_ajax_load' => array(
      'trigger' => $trigger,
      'target' => $target,
      'toggle' => $toggle,
      'animation' => $animation,
      'module_path' => $module_path,
      'site_name' => $site_name,
    ),
  ),
  'setting');
  drupal_add_js($module_path . '/jquery_ajax_load.js');
}

/**
* Implementation of hook_menu().
*/
function jquery_ajax_load_menu() {
  // Admin settings.
  $items['admin/config/development/jquery_ajax_load'] = array(
    'title' => 'JQuery AJAX Load',
    'description' => 'Shows any page on a AJAX link',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('jquery_ajax_load_admin'),
    'access arguments' => array('administer site configuration'),
  );
  // Only to generate a TAB
  $items['admin/config/development/jquery_ajax_load/link'] = array(
    'title' => 'Link',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  // Prefix for AJAX requests
  $items['jquery_ajax_load/get'] = array(
    'page callback' => 'jquery_ajax_load_callback',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'jquery_ajax_load_delivery_callback',
  );
  // Test page
  $items['jquery_ajax_load/test'] = array(
    'page callback' => 'jquery_ajax_load_test',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Callback function for admin setting.
 */
function jquery_ajax_load_admin() {
  // This module will not work if used in overlay paths such as 
  // admin/* , node/add etc if user has overlay access.
  if ( user_access('access overlay') ) {
    $message = t("Overlay module is not compatible with jQuery Ajax Load links API module. To ajaxify admin paths, please check README.txt");
    drupal_set_message($message, 'warning', FALSE);
  }
  $form['jquery_ajax_load_trigger'] = array(
    '#type' => 'textarea',
    '#title' => t('Valid jQuery Classes/IDs to trigger TB Modal via Ajax (One per line)'),
    '#default_value' => variable_get('jquery_ajax_load_trigger', '.jquery_ajax_load' . "\n"),
    '#description' => t('Specify the class/ID of links to convert that link to AJAX, one per line. For example by providing ".jquery_ajax_load" will convert any link with class="jquery_ajax_load"'),
  );
  $form['jquery_ajax_load_target'] = array(
    '#type' => 'text',
    '#title' => t('A valid jQuery ID where AJAX callback will be rendered'),
    '#default_value' => variable_get('jquery_ajax_load_target', '#jquery_ajax_load_target'),
    '#description' => t(''),
  );
  $form['jquery_ajax_load_toggle'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check if you want link to act as toggle buttom'),
    '#default_value' => variable_get('jquery_ajax_load_toggle', TRUE),
    '#description' => t('If toggle is activated, content on target will desappear when link is clicked twice.'),
  );
  $form['jquery_ajax_load_animation'] = array(
    '#type' => 'checkbox',
    '#title' => t('Check if you want link to use jQuery show and hide effects'),
    '#default_value' => variable_get('jquery_ajax_load_animation', TRUE),
    '#description' => t('If animation is activated, content on target will show and desappear using jQuery show and hide standard effects.'),
  );

  return system_settings_form($form);
}

/**
 * Returns only content part of page for Delibery Callback function.
 */

function jquery_ajax_load_delivery_callback($page_callback_result) {
  if (isset($page_callback_result) && is_null(drupal_get_http_header('Content-Type'))) {
    drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');
  }

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  // Menu status constants are integers; page content is a string or array.
  if (is_int($page_callback_result)) {
    // @todo: Break these up into separate functions?
    switch ($page_callback_result) {
      case MENU_NOT_FOUND:
        drupal_add_http_header('Status', '404 Not Found');

        print t("Page not found");
        break;

      case MENU_ACCESS_DENIED:
        drupal_add_http_header('Status', '403 Forbidden');

        print t("Access denied");
        break;

      case MENU_SITE_OFFLINE:
        print t('Site under maintenance');
        break;
    }
  }
  elseif (isset($page_callback_result)) {
    
    print drupal_render($page_callback_result);
    // Perform end-of-request tasks.
    drupal_page_footer();
  }
}

/**
 * Callback function for AJAX request.
 *
 * Rebuilds URL for page callback
 * Uses menu_execute_active_handler to build page
 */

function jquery_ajax_load_callback() {
  //$path = implode('/', func_get_args());
  //PHP 5.2 fix
  $args = func_get_args();
  $path = implode('/', $args);
  
  $normal_path = drupal_get_normal_path($path);
  $args = explode('/', $normal_path);
  // Evaluates if entity type have a special view mode
  // If function does not exists returns default view mode or rendered node
  $function = 'jquery_ajax_load_view_' . $args[0];
  if (function_exists($function)) {
    $render_string = $function( $args[1] );
  } 
  else {
    $render_string = menu_execute_active_handler($normal_path, FALSE);
  }
  return $render_string;
}

/**
 * Get trigger classes/ids.
 */
function jquery_ajax_load_get_triggers($variable, $default_trigger) {
  $trigger = variable_get($variable, $default_trigger . "\n");
  $trigger = explode("\n", $trigger);
  $trigger = array_filter($trigger);
  $trigger = implode(',', $trigger);
  return $trigger;
}

/**
 * Creates a test page.
 */

function jquery_ajax_load_test() {
  $output = sprintf('<a class="btn jquery_ajax_load_TB" href="/node/10">Javascript Ajax Modal Test 10</a></br>
    <a class="btn jquery_ajax_load_TB" href="/node/11">Javascript Ajax Modal Test 11</a></br>
    <a class="btn jquery_ajax_load" href="/node/10">jQuery Test 10</a></br>
    <a class="btn jquery_ajax_load" href="/node/11" data-target="ajax-target-11">jQuery Test 11</a></br></br>
    <div id="jquery_ajax_load_target">Here goes AJAX Callback 10</div></br>
    <div id="ajax-target-11">Here goes AJAX Callback 11</div>');
  return $output;
}