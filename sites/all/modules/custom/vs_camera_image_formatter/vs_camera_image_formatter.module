<?php
/**
 * @file
 * adds a formatter for text fields that creates a facebook button
 *
 */
 
/**
 * Implements hook_field_formatter_info().
 */
function vs_camera_image_formatter_field_formatter_info() {
  return array(
    'vs_camera_image_formatter_formatter' => array( //Machine name of the formatter
      'label' => t('Facebook Link'),
      'field types' => array('text'), //This will only be available to text fields
      'settings'  => array( //Array of the settings we'll create
        'pic_size' => 'small', //give a default value for when the form is first loaded
        'tooltip' => 'Link to user Facebook page', //ditto
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function vs_camera_image_formatter_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  //This gets the view_mode where our settings are stored
  $display = $instance['display'][$view_mode];
  //This gets the actual settings
  $settings = $display['settings'];
  //Initialize the element variable
  $element = array();
  //Add your select box
  $element['pic_size'] = array(
    '#type'           => 'select',                           // Use a select box widget
    '#title'          => t('Button Size'),                   // Widget label
    '#description'    => t('Select what size of FB button'), // Helper text
    '#default_value'  => $settings['pic_size'],              // Get the value if it's already been set
    '#options'        => array(
      'small'  => 'Small',
      'medium' => 'Medium',
      'large'  => 'Large',
    ),
  );
  $element['tooltip'] = array(
    '#type'           => 'textfield',                        // Use a textbox
    '#title'          => t('Tool Tip'),                      // Widget label
    '#description'    => t('This text will appear when a user mouses over.'),  // helper text
    '#default_value'  => $settings['tooltip'],               // Get the value if it's already been set
  );
  return $element;
}


/**
 * Implements hook_field_formatter_settings_summary().
 */
function vs_camera_image_formatter_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = t('Use a @size Facebook button with the tooltip of "@tooltip"', array(
    '@size'     => $settings['pic_size'],
    '@tooltip'  => $settings['tooltip'],
  )); // we use t() for translation and placeholders to guard against attacks
  return $summary;
}

/**
 * Implements hook_field_formatter_view().
 */
function vs_camera_image_formatter_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array(); // Initialize the var
  $settings = $display['settings']; // get the settings
  $size = $settings['pic_size']; // The Size setting selected in the settings form
  $tooltip = $settings['tooltip']; // The tool tip assigned in settings
  // Create the image - Note that I'm storing the images in our module but they could be anywhere
  $image = '<img src="/' . drupal_get_path('module', 'vs_camera_image_formatter') . 'fb-' . $size . '.png">';
  foreach ($items as $delta => $item) {
    $fb = $item['safe_value']; // Getting the actual value
  }
  $options = array(
    'html'        => TRUE, // This tells Drupal that we're sending HTML, not plain text, otherwise it would encode it
    'attributes'  => array(
      'title' => $tooltip, // This sets our tooltip
      ),
    );
  if(isset($fb)) {
    $link = l($image, $fb, $options); // Create the Link
    $element[0]['#markup'] = $link; // Assign it to the #markup of the element
  }
  return $element;
}



